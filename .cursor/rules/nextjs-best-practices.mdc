---
description: Best practices for Next.js applications and routing
globs: **/*.tsx
alwaysApply: false
---
# Next.js Best Practices

Standards for Next.js application development. Auto-included for TypeScript and TSX files.

<rule>
name: nextjs_best_practices
description: Best practices for Next.js applications and routing. Auto-included for TypeScript and TSX files.
globs: ["**/*.{ts,tsx}"]
filters:
  - type: file_extension
    pattern: "\\.(ts|tsx)$"
actions:
  - type: suggest
    message: |
      Follow these Next.js best practices:

      1. App Router Usage:
         - Use the App Router for improved performance and data fetching
         - Implement route groups for better organization
         - Use loading.tsx and error.tsx for proper loading and error states
         - Leverage server components by default

      2. Error Handling:
         - Implement error boundaries at strategic points
         - Use error.tsx files for route-specific error handling
         - Provide user-friendly error messages
         - Log errors appropriately for debugging

      3. Built-in Optimizations:
         - Use next/image for automatic image optimization
         - Implement next/font for optimized font loading
         - Leverage automatic code splitting
         - Use next/link for client-side navigation

      4. Data Fetching:
         - Use server components for direct data fetching
         - Implement revalidate for static data when needed
         - Use generateStaticParams for static paths
         - Cache responses appropriately using fetch cache options

      5. Internationalization:
         - Configure i18n in next.config.js
         - Use middleware for language detection
         - Implement locale-specific routes
         - Handle RTL languages appropriately
         
      6. Next.js 15 Specific:
         - Always await request-specific APIs like headers() and cookies()
         - Use the async pattern for all request context functions
         - Update authentication libraries to support Next.js 15's async APIs
         - Follow the new caching semantics for optimal performance

examples:
  - input: |
      // Bad: Using traditional React Router
      import { BrowserRouter } from 'react-router-dom'

      // Good: Using Next.js App Router
      import { useRouter } from 'next/navigation'
    output: "Use Next.js built-in routing instead of external routing libraries"

  - input: |
      // Bad: Regular img tag
      <img src="/large-image.jpg" />

      // Good: Next.js Image component
      import Image from 'next/image'
      <Image src="/large-image.jpg" width={800} height={600} alt="Description" />
    output: "Use Next.js Image component for automatic optimization"
    
  - input: |
      // Bad: Synchronous headers in Next.js 15
      import { headers } from 'next/headers'
      
      export default function Page() {
        const headersList = headers()
        // ...
      }
      
      // Good: Async headers in Next.js 15
      import { headers } from 'next/headers'
      
      export default async function Page() {
        const headersList = await headers()
        // ...
      }
    output: "Always await headers() in Next.js 15 as per the new async request APIs requirement"

metadata:
  priority: high
  version: 1.0
</rule>

